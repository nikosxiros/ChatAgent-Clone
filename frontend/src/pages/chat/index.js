

import Head from "next/head";
import {useEffect, useRef, useState} from "react";
import {sendMessage} from "next/dist/client/components/react-dev-overlay/pages/websocket";
import axios from "axios";




export default function ChatPage() {


    const [threads, setThreads] = useState(null)
    const [messageToAgent, setMessageToAgent]=useState("")
    const [messages, setMessages]=useState([]);
    const messagesEndRef=useRef();


    useEffect(() => {

        console.log("ChatPage mounted");

        let token = localStorage.getItem("token");

        if (token == null) {
            window.location.href = "/login";
        }

        let threadsFromServer = [
            {
                id: 1,
                threadName: "Test thread 1",
                createdAt: "2025-03-01T10:00:00Z",
            },
            {
                id: 2,
                threadName: "Test thread 2",
                createdAt: "2025-03-02T10:00:00Z",
            },
            {
                id: 3,
                threadName: "Test thread 3",
                createdAt: "2025-03-03T10:00:00Z",
            },
            {
                id: 4,
                threadName: "Test thread 4",
                createdAt: "2025-03-03T10:00:00Z",
            },
        ]

        setThreads(threadsFromServer);

    }, []);

    useEffect(() => {
        const fetchMessages = async () => {

            const token = localStorage.getItem("token");
            try {
                const response = await axios.get("http://localhost:8080/messages", {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });
                console.log("this is messages from backend babe " + response.data[0] );
                setMessages(response.data);


            } catch (error) {
                console.error("Error to fetch messages:", error);
            }
        };

        fetchMessages();
    }, [])

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);







    const messageInput = (e) => {
        setMessageToAgent(e.target.value);
    };

    const sendAMessage = async (e) => {
        e.preventDefault();
        const token = localStorage.getItem("token");

        const userMessage = {
            content: messageToAgent,
            threadId: { id: 1 },
            isCompletion: false,
            completionModel: "llama3-8b-8192",
        };

        try {

            setMessages((prev) => [...prev, userMessage]);

            console.log("prin to requesst: ",userMessage)
            await axios.post("http://localhost:8080/messages", userMessage, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
            });


            const response = await axios.get("http://localhost:8080/messages", {
                headers: { Authorization: `Bearer ${token}` },
            });


            setMessages(response.data);
        } catch (e) {
            console.error("failed to send-receive messages", e);
            console.error('Status', e.response?.status);
            console.error('Response data', e.response?.data);
        }

        setMessageToAgent("");
    };






   const handleLogout = () => {
        console.log("Logging out...");
       const token =localStorage.getItem("token");
        try{
            axios.delete("http://localhost:8080/messages",{
                headers:{
                    Authorization: `Bearer ${token}`
                }
            });
        }
       catch (error){
            console.log(error);
       }

        localStorage.removeItem("token");
        window.location.href='/login'
    };

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="page-container">
                <header>
                    <div className="header-content">
                        <div className="header-brand">
                            <img src="./bootcamp-2025.03-logo.jpg" alt="Logo" className="header-logo"/>
                            <div className="header-title">Chat Application</div>
                        </div>
                        <div className="profile-dropdown">
                            <input type="checkbox" id="profile-toggle"/>
                            <label htmlFor="profile-toggle" className="profile-icon">⚙️ </label>
                            <div className="dropdown-menu">
                                <a href="#">Profile</a>
                                <a href="/account">Settings</a>
                                <a href="#" onClick={e => {
                                    e.preventDefault();
                                    handleLogout();
                                }}>Logout</a>
                            </div>

                            <label htmlFor="profile-toggle" className="overlay"></label>
                        </div>
                    </div>
                </header>
                <div className="center-container">
                    <aside className="threads-list">
                        <h2>Threads</h2>
                        <div className="threads">

                            {threads && threads.map((thread) => (
                                <div key={thread.id} className="thread-item">{thread.threadName}</div>
                            ))}


                        </div>
                    </aside>
                    <main className="main-container">
                        <div className="chat-window">

                            <div className="chat-model-select">
                                <select id="model-select">
                                    <option value="llama3-8b-8192">llama3-8b-8192</option>
                                    <option value="gpt-3.5-turbo">GPT-3.5 Turbo</option>
                                    <option value="gpt-4">GPT-4</option>
                                    <option value="gpt-4-turbo">GPT-4 Turbo</option>
                                    <option value="custom-model">Custom Model...</option>
                                </select>
                            </div>

                            <div className="messages">
                                {messages.map((msg, index) => (
                                    <div
                                        key={index}
                                        className={`message ${msg.isCompletion ? 'user' : 'bot'}`}
                                    >
                                        {msg.content}
                                    </div>
                                ))}
                                <div ref={messagesEndRef}/>
                            </div>

                            <form onSubmit={sendAMessage}>

                            <div className="input-container">
                                <input type="text"
                                       value={messageToAgent}
                                       onChange={messageInput}
                                       placeholder="Type a message…"/>

                                <button>➤</button>
                            </div>
                            </form>
                        </div>
                    </main>
                </div>
                <footer>© 2025 Chat App, Inc.</footer>
            </div>
        </>
    );
}
